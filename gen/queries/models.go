// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package queries

import (
	"database/sql"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

// Record of an image that was successfully generated from a user-submitted image request. An image request may result in multiple images. Images are ordered by index, matching the array in which they were returned by the image generation API.
type DynamoImage struct {
	// ID of the image_request record associated with this image.
	ImageRequestID uuid.UUID
	// Sequential, zero-indexed position of this image in the original results array.
	Index int32
	// URL indicating where the image has been uploaded for long-term storage, so that it can be displayed in client applications.
	Url string
}

// Records the fact that a user requested that images be generated, with their chosen prompt, to be overlaid on the video during the stream.
type DynamoImageRequest struct {
	// Globally unique identifier for this request.
	ID uuid.UUID
	// ID of the Twitch user that initiated this request.
	TwitchUserID string
	// ID of the broadcast that was active when the image request was submitted; may be null if the request was submitted while no broadcast was in progress.
	BroadcastID sql.NullInt32
	// ID of the screening that was active when the image request was submitted; may be null if the request was submitted while no tape was active.
	ScreeningID uuid.NullUUID
	// The style of image being requested, from the generation-requests schema.
	Style string
	// JSON object containing user-supplied inputs describing the desired image, e.g. {"subject":"a cardboard box"}, {"subject":"several large turkeys"}, {"subject":"the concept of love"}
	Inputs json.RawMessage
	// The complete prompt that was submitted in order to initiate image generation, e.g. "a ghostly image of several large turkeys, with glitchy VHS artifacts, dark background".
	Prompt string
	// Timestamp indicating when the request was submitted.
	CreatedAt time.Time
	// Timestamp indicating when we received a response for the image generation request, whether successful or not. If NULL, the request is still being processed and images are not ready yet.
	FinishedAt sql.NullTime
	// Error message describing why the request completed unsuccessfully. If NULL and finished_at is not NULL, the request completed successfully.
	ErrorMessage sql.NullString
}
